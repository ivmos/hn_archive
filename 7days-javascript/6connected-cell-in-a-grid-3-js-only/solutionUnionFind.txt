//https://en.wikipedia.org/wiki/Connected-component_labeling
function processData(input) {
    var m = input.split(/\r?\n/)[0];
    var n = input.split(/\r?\n/)[1];
    var matrix = getMatrixFromInput(input);
    var unionFind = new UnionFind(m*n);
    for (var i = 0; i < m; i++) {
        for (var j = 0; j < n; j++) {
            var currentSiteValue = matrix[i][j];
            var currentSitePos = xyTo1D(n, i, j);
            if (currentSiteValue == 0) {
                continue;
            }
            // X[ ]
            if (j > 0) {
                if (matrix[i][j - 1] == 1) {
                    unionFind.union(currentSitePos, xyTo1D(n, i, j - 1));
                }
            }
            // X
            // []
            if (i > 0) {
                if (matrix[i - 1][j] == 1) {
                    unionFind.union(currentSitePos, xyTo1D(n, i - 1, j));
                }
            }
            // []X
            if (j < n - 1) {
                if (matrix[i][j + 1] == 1) {
                    unionFind.union(currentSitePos, xyTo1D(n, i, j + 1));
                }
            }
            // []
            // X
            if (i < m - 1) {
                if (matrix[i + 1][j] == 1) {
                    unionFind.union(currentSitePos, xyTo1D(n, i+1,j));
                }
            }
            // X
            //  []
            if (i > 0 && j > 0) {
                if (matrix[i - 1][j - 1] == 1) {
                    unionFind.union(currentSitePos, xyTo1D(n, i - 1, j - 1));
                }
            }
            //   X
            // []
            if (i > 0 && j < n - 1 ) {
                if (matrix[i - 1][ j + 1] == 1) {
                    unionFind.union(currentSitePos, xyTo1D(n, i - 1, j + 1));
                }
            }
            //  []
            // X
            if (i < m - 1 && j > 0) {
                if (matrix[i + 1][j - 1] == 1) {
                    unionFind.union(currentSitePos, xyTo1D(n, i + 1, j - 1));
                }
            }
            // []
            //   X
            if (i < m - 1 && j < n - 1) {
                if (matrix[i + 1][j + 1] == 1) {
                    unionFind.union(currentSitePos, xyTo1D(n, i + 1, j + 1));
                }
            }
        }
    }
    var regions = unionFind.getId();
    var regionsMap = {};
    var max = 0;
    for (var i = 0; i < regions.length; i++) {
        if (regionsMap[regions[i]] > 0) {
            continue;
        }
        var sum = 1;
        for (var j = i + 1; j < regions.length; j++) {
            if (regions[i] == regions[j]) {
                sum++;
            }
        }
        regionsMap[regions[i]] = sum;
        if (sum > max) {
            max = sum;
        }
    }
    console.log(max);

}

function getMatrixFromInput(input) {
    var m = input.split(/\r?\n/)[0];
    var n = input.split(/\r?\n/)[1];
    var matrix = [];
    for (var i=0; i < m; i++) {
        var line = input.split(/\r?\n/)[i + 2].split(" ").map(Number);
        for (var j=0; j < n; j++) {
            if (j == 0) {
                matrix[i] = [];
            }
            matrix[i][j] = line[j];
        }
    }
    return matrix;
}

function xyTo1D(n, x, y) {
    var result =  n * x + y;
    if (result < 0) {
        result = 0;
    }
    return result;
}

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});


// https://github.com/juzerali/unionfind/blob/master/index.js
function UnionFind(n, key){

    if(! (this instanceof UnionFind))
        return new UnionFind(n);

    if(key && typeof key != 'function'){
        throw new Error("key has to be a function or else left undefined");
    }

    var cnt, id, sz, length;
    key = key || function(a){return a;};


    cnt = length = n;
    id = new Array(n);
    sz = new Array(n);
    for (var i = 0; i < n; i++) {
        id[i] = i;
        sz[i] = 1;
    }

    this.size = function(){
        return length;
    }

    this.count = function(){
        return cnt;
    }

    this.find = function (p) {
        p = key(p);
        while(p != id[p]){
            id[p] = id[id[p]];
            p = id[p];
        }

        return p;
    }

    this.connected = function(p, q){
        p = key(p);
        q = key(q);
        ensureIndexWithinBounds(p, q)
        return this.find(p) === this.find(q)
    }

    this.union = function(p, q){
        p = key(p);
        q = key(q);
        ensureIndexWithinBounds(p, q);
        var i = this.find(p)
        ,   j = this.find(q);

        if (i === j) return;

        if (sz[i] < sz[j])  {id[i] = j; sz[j] += sz[i];}
        else                {id[j] = i; sz[i] += sz[j];}

        cnt--;
        return;
    }

    this.getId = function() {
        return id;
    }

    function ensureIndexWithinBounds(args){
        for (var i = arguments.length - 1; i >= 0; i--) {
            var p = arguments[i];
            if(p >= length)
                throw new Error("Index out of bounds. The maximum index can be length-1");
        }
    }
}

