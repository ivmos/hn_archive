function processData(input) {
    var m = input.split(/\r?\n/)[0];
    var n = input.split(/\r?\n/)[1];
    var matrix = getMatrixFromInput(input);
    console.log(cc(matrix).id);
    
} 

function getMatrixFromInput(input) {
    var m = input.split(/\r?\n/)[0];
    var n = input.split(/\r?\n/)[1];
    var matrix = [];
    for (var i=0; i < m; i++) {
        var line = input.split(/\r?\n/)[i + 2].split(" ").map(Number);
        for (var j=0; j < n; j++) {
            if (j == 0) {
                matrix[i] = [];
            }
            matrix[i][j] = line[j];
        }
    }
    return matrix;
}

function xyTo1D(n, x, y) {
    var result =  n * x + y;
    if (result < 0) {
        result = 0;
    }
    return result;
}

process.stdin.resume();
process.stdin.setEncoding("ascii");
_input = "";
process.stdin.on("data", function (input) {
    _input += input;
});

process.stdin.on("end", function () {
   processData(_input);
});

var cc = (function() {
    var marked = [];
    var id = [];
    var size = [];
    var count = 0;
    
    
    
    var dfs = function(g, v) {
        marked[v] = true;
        id[v] = count;
        size[count]++;
        for (var w in adj(v)) {
            if (!marked[v]) {
                dfs(g, w);
            }
        }
    }
 
    return function(g) {
        marked = Array.apply(null, Array(g.length * g.length)).map(Boolean.prototype.valueOf, false);
        id = Array.apply(null, Array(g.length * g.length)).map(Number.prototype.valueOf, 0); 
        size = Array.apply(null, Array(g.length * g.length)).map(Number.prototype.valueOf, 0); 
        count = 0;

        for (var v = 0; v < graph.length; v++) {
            if (!marked[v]) {
                dfs(g, v);
                count++;
            }
        }
    }
});

